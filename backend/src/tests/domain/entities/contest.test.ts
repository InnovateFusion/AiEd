// Generated by CodiumAI

import Contest, { IContest } from "../../../domain/entities/contest";

describe("Contest", () => {
  // Returns an object with all properties of IContest passed as argument.
  it("should return an object with all properties of IContest passed as argument", () => {
    const contestData: IContest = {
      _id: "1",
      title: "Contest 1",
      mode: "mode1",
      description: "Description 1",
      sponsor: "Sponsor 1",
      problems: [],
      startTime: new Date(),
      duration: 60,
      participants: [],
      creator: {
        _id: "2",
      },
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    const contest = Contest(contestData);

    expect(contest.getId()).toBe("1");
    expect(contest.getTitle()).toBe("Contest 1");
    expect(contest.getMode()).toBe("mode1");
    expect(contest.getDescription()).toBe("Description 1");
    expect(contest.getSponsor()).toBe("Sponsor 1");
    expect(contest.getProblems()).toEqual([]);
    expect(contest.getStartTime()).toBeInstanceOf(Date);
    expect(contest.getDuration()).toBe(60);
    expect(contest.getParticipants()).toEqual([]);
    expect(contest.getCreator()).toEqual({
      _id: "2",
    });
  });

  // Returns an object with all properties of IContest passed as argument, even if some are missing.
  it("should return an object with all properties of IContest passed as argument, even if some are missing", () => {
    const contestData: IContest = {
      title: "Contest 1",
      problems: [],
      duration: 60,
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    const contest = Contest(contestData);

    expect(contest.getId()).toBeUndefined();
    expect(contest.getTitle()).toBe("Contest 1");
    expect(contest.getMode()).toBeUndefined();
    expect(contest.getDescription()).toBeUndefined();
    expect(contest.getSponsor()).toBeUndefined();
    expect(contest.getProblems()).toEqual([]);
    expect(contest.getStartTime()).toBeUndefined();
    expect(contest.getDuration()).toBe(60);
    expect(contest.getParticipants()).toBeUndefined();
    expect(contest.getCreator()).toBeUndefined();
  });

  // Returns an object with all properties of IContest passed as argument, even if some are zero.
  it("should return an object with all properties of IContest passed as argument, even if some are zero", () => {
    const contestData: IContest = {
      _id: "1",
      title: "Contest 1",
      mode: "mode1",
      description: "Description 1",
      sponsor: "Sponsor 1",
      problems: [],
      startTime: new Date(),
      duration: 0,
      participants: [],
      creator: {
        _id: "2",
      },
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    const contest = Contest(contestData);

    expect(contest.getId()).toBe("1");
    expect(contest.getTitle()).toBe("Contest 1");
    expect(contest.getMode()).toBe("mode1");
    expect(contest.getDescription()).toBe("Description 1");
    expect(contest.getSponsor()).toBe("Sponsor 1");
    expect(contest.getProblems()).toEqual([]);
    expect(contest.getStartTime()).toBeInstanceOf(Date);
    expect(contest.getDuration()).toBe(0);
    expect(contest.getParticipants()).toEqual([]);
    expect(contest.getCreator()).toEqual({
      _id: "2",
    });
  });
});
