// Generated by CodiumAI

import Contest from "../../../domain/entities/contest";
import contestDbRepository from "../../../domain/repositories/contest";

const id = "12345";
const contests = [
  { _id: "1", title: "Test Contest 1" },
  { _id: "2", title: "Test Contest 2" },
];
const contest = {
  _id: "12345",
  title: "Test Contest",
  mode: "marathon",
  description: "Test Description",
  sponsor: "Test Sponsor",
  problems: ["Problem 1", "Problem 2"],
  startTime: new Date(),
  duration: 60,
  participants: ["Participant 1", "Participant 2"],
  creator: { _id: "123" },
};
const repository = {
  findById: jest.fn().mockResolvedValue({ _id: id }),
  viewAllContest: jest.fn().mockResolvedValue(contests),
  createContest: jest.fn().mockResolvedValue(contest),
  deleteContest: jest.fn().mockResolvedValue({ _id: id }),
  updateContest: jest.fn().mockResolvedValue(contest),
};

describe("contestDbRepository", () => {
  // should be able to find a contest by id
  it("should find a contest by id", () => {
    const contestDbRepo = contestDbRepository(repository);
    return contestDbRepo.findById(id).then((contest) => {
      expect(contest._id).toBe(id);
      expect(repository.findById).toHaveBeenCalledWith(id);
    });
  });

  // should be able to view all contests with pagination and search
  it("should view all contests with pagination and search", () => {
    const params = {
      skip: 0,
      limit: 10,
      search: "test",
    };
    const contests = [
      { _id: "1", title: "Test Contest 1" },
      { _id: "2", title: "Test Contest 2" },
    ];
    const contestDbRepo = contestDbRepository(repository);
    return contestDbRepo.viewAllContest(params).then((result) => {
      expect(result).toEqual(contests);
      expect(repository.viewAllContest).toHaveBeenCalledWith(params);
    });
  });

  // should throw an error if an invalid contest id is provided
  it("should throw an error if an invalid contest id is provided", () => {
    const id = "invalidId";
    const contestDbRepo = contestDbRepository(repository);
    return contestDbRepo.findById(id).catch((error) => {
      expect(error.message).toBe(`${id} is not a valid contest id`);
      expect(error.statusCode).toBe(400);
      expect(repository.findById).toHaveBeenCalledWith(id);
    });
  });

  // should throw an error if a contest is not found by id
  it("should throw an error if a contest is not found by id", () => {
    const id = "12345";
    const contestDbRepo = contestDbRepository(repository);
    return contestDbRepo.findById(id).catch((error) => {
      expect(error.message).toBe(`Contest with id ${id} not found`);
      expect(error.statusCode).toBe(404);
      expect(repository.findById).toHaveBeenCalledWith(id);
    });
  });

  // should handle empty search parameter when viewing all contests
  it("should handle empty search parameter when viewing all contests", () => {
    const params = {
      skip: 0,
      limit: 10,
    };
    const contests = [
      { _id: "1", title: "Test Contest 1" },
      { _id: "2", title: "Test Contest 2" },
    ];
    const contestDbRepo = contestDbRepository(repository);
    return contestDbRepo.viewAllContest(params).then((result) => {
      expect(result).toEqual(contests);
      expect(repository.viewAllContest).toHaveBeenCalledWith(params);
    });
  });

  // should be able to update an existing contest
  it("should update a contest when given a valid id and contest object", () => {
    const contest = Contest({
      _id: id,
      title: "Test Contest",
      mode: "Single",
      description: "This is a test contest",
      sponsor: "Test Sponsor",
      problems: ["Problem 1", "Problem 2"],
      startTime: new Date(),
      duration: 60,
      participants: ["User 1", "User 2"],
      creator: { _id: "creatorId" },
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    const contestDbRepo = contestDbRepository(repository);
    return contestDbRepo.updateContest(id, contest).then((updatedContest) => {
      expect(updatedContest._id).toBe(id);
      expect(repository.updateContest).toHaveBeenCalledWith(id, contest);
    });
  });

  // should be able to delete a contest
  it("should delete a contest when given a valid id", () => {
    const id = "12345";
    const contestDbRepo = contestDbRepository(repository);
    return contestDbRepo.deleteContest(id).then((deletedContest) => {
      expect(deletedContest._id).toBe(id);
      expect(repository.deleteContest).toHaveBeenCalledWith(id);
    });
  });

  // should handle empty sort parameter when viewing all contests
  it("should return all contests when sort parameter is empty", () => {
    const params = {
      skip: 0,
      limit: 10,
      search: "test",
      sort: {},
    };
    
    const contestDbRepo = contestDbRepository(repository);
    return contestDbRepo.viewAllContest(params).then((result) => {
      expect(result).toEqual(contests);
      expect(repository.viewAllContest).toHaveBeenCalledWith(params);
    });
  });
});
