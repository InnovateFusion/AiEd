// Generated by CodiumAI

import Contest from "../../../domain/entities/contest";
import CustomError from "../../../config/error";
import contestRepositoryMongoDB from "../../../infrastructure/repositories/contest";

describe("contestRepositoryMongoDB", () => {
  // should be able to find a contest by id
  it("should throw an error if provided id is not a valid ObjectId while finding a contest", () => {
    const id = "invalidId";
    expect(() => {
      contestRepositoryMongoDB().findById(id);
    }).toThrowError(new CustomError(`${id} is not a valid contest id`, 400));
  });

  // should throw an error if provided id is not a valid ObjectId while deleting a contest
  it("should ... when ...", () => {
    const id = "invalidId";
    expect(() => {
      contestRepositoryMongoDB().deleteContest(id);
    }).toThrowError(new CustomError(`${id} is not a valid contest id`, 400));
  });

  // should throw an error if provided id is not a valid ObjectId while updating a contest
  it("should ... when ...", () => {
    const id = "invalidId";
    const contest = Contest({
      title: "Updated Contest",
      mode: "Single",
      description: "Description",
      sponsor: "Sponsor",
      problems: ["Problem 1", "Problem 2"],
      startTime: new Date(),
      duration: 60,
      participants: ["Participant 1", "Participant 2"],
      creator: { _id: "Creator" },
      createdAt: new Date(),
      updatedAt: new Date(),
    });
    expect(() => {
      contestRepositoryMongoDB().updateContest(id, contest);
    }).toThrowError(new CustomError(`${id} is not a valid contest id`, 400));
  });

});
